{"title":"聊明白机器学习 | 五. 分类（Classification）　","date":"2019-08-10T12:20:24.000Z","thumbnail":"http://cdn.1ouo1.com/qh00v.jpg","slug":"classification","comments":true,"tags":["Basic"],"updated":"2019-08-10T21:08:49.000Z","content":"<h2 id=\"前言干话\"><a class=\"markdownIt-Anchor\" href=\"#前言干话\"></a> 前言干话<a href=\"post/classification#前言干话\"></a></h2>\n<p>前几天骑摩托跑了一趟安徽小长途，皖南之山风光怡人，道不宽弯不缓但好在路面整洁鲜有砂石，人车稀少，即便穿过村庄的羊肠小道都被收拾得清清爽爽，一不留神就能满胎。特别是黄山附近的 S103、G205，黄昏和夜间骑行你甚至会恍惚从风中听到应景的 &lt;豆腐宅急便&gt;…</p>\n<p>“没上黄山。”<br>\n“啊？你都到黄山脚下了没上山去？”<br>\n“每天舒舒服服睡到中午，骑个车多美，爬山下回吧…”</p>\n<p>回杭第一天就发现有一个同样做李宏毅老师机器学习内容的团队火了。大概团队是 8 个同学用了半年时间，把李老师的课程图文版和相关代码都做了整理呈现。这个团队叫 DataWhale，该项目的<a href=\"https://github.com/datawhalechina/leeml-notes\" target=\"_blank\" rel=\"noopener\">地址在这。</a></p>\n<p>突然好酸啊。虽然动得比人早，但人家已经完结了并且收获了不错的影响力，十分羡慕，团队的力量是强大。</p>\n<p>不过相对于 DataWhale 100% 完整还原课程所有内容，本站的方向还是坚持用大白话把这事儿「聊明白」，力求让你承受尽可能小的「时间负担」和「认知负担」来搞懂机器学习。所以我还是会坚持把这块内容挤完的…啊哈哈哈哈。</p>\n<p>当然还有个插曲，我很荣幸和意外地被拉入了上述这个 12 人的开源项目小组，希望后续有机会能一起做些有趣的事情咯。</p>\n<p>今天废话有点多，马上开始分类（Classification）吧。</p>\n<a id=\"more\"></a>\n<h2 id=\"分类是什么有啥用\"><a class=\"markdownIt-Anchor\" href=\"#分类是什么有啥用\"></a> 分类是什么有啥用<a href=\"post/classification#分类是什么有啥用\"></a></h2>\n<p>相对于回归（Regression）模型最终是通过最佳方法输出的是一个数值，我们的分类（Classification）模型，简单讲就是通过找到的最佳方法，最终输出「我们对应的输入是属于哪个类别」的这么个事。</p>\n<p>回归模型能做的事显然有很多：</p>\n<p>比如输入一个人的各种财务信息（收入、存款、职业、年龄、金融历史等）来判断可不可以给他批贷款；</p>\n<p>比如输入一个患者的各种生理信息（症状、年龄、性别、用药历史等）来判断他得了哪种疾病；</p>\n<p>比如输入一个手写汉字的图片来判断这写的是哪一个字（从 8000 多个汉字选项中找正解的分类问题）；</p>\n<p>再比如输入一个人脸的图片来判断这是哪一个人（从海量人脸数据库中找正解的分类问题）。</p>\n<div class=\"article-img\"><p><img src=\"http://cdn.1ouo1.com/e71qu.png\" alt data-zoomable></p></div>\n<h2 id=\"以精灵宝可梦举例\"><a class=\"markdownIt-Anchor\" href=\"#以精灵宝可梦举例\"></a> 以精灵宝可梦举例<a href=\"post/classification#以精灵宝可梦举例\"></a></h2>\n<h3 id=\"分类可有用了\"><a class=\"markdownIt-Anchor\" href=\"#分类可有用了\"></a> 分类可有用了<a href=\"post/classification#分类可有用了\"></a></h3>\n<p>当然，按照惯例，我们还得扯上精灵宝可梦当例子。分类这事可以帮我们在面对一个未曾见过的宝可梦时，判断它属于那种属性。</p>\n<div class=\"article-img\"><p><img src=\"http://cdn.1ouo1.com/ner32.png\" alt data-zoomable></p></div>\n<p>要知道宝可梦有 18 种属性，了解了对方属性后，对战时候我们就可以更有的放矢地使用克他，或防它的宝可梦了。</p>\n<div class=\"article-img\"><p><img src=\"http://cdn.1ouo1.com/9lw36.png\" alt data-zoomable></p></div>\n<p>具体要怎么来做这个分类呢？首先我们需要将一只宝可梦数值化，即用一些特性（Feature）数值（比如总能力值、体力值、攻击力、防御力、特殊攻击力、特殊防御力、速度等）来描述一只宝可梦，比如举例皮卡丘的每一项数值如下。</p>\n<div class=\"article-img\"><p><img src=\"http://cdn.1ouo1.com/5gfao.png\" alt data-zoomable></p></div>\n<p>等到收集到一些训练数据（宝可梦的各项特性和所属属性信息）后，就可以来训练了。</p>\n<h3 id=\"当成回归来处理\"><a class=\"markdownIt-Anchor\" href=\"#当成回归来处理\"></a> 当成回归来处理？<a href=\"post/classification#当成回归来处理\"></a></h3>\n<p>有一种最简单粗暴的想法，就是把这事当做一个回归（Regression）问题来解决。</p>\n<p>比如我们以简单的二元（Binary）分类问题为例，既然我们要用回归的办法做（输出都做数值转换），那我们在训练时候，把训练数据中的「分类 1」当做数值 1，把「分类 2」当做数值 -1。然后，我们就可以在跑测试数据时候指定，如果输出值是大于 0 的，我们就当成输出了「分类 1」，否则我们就当成输出了「分类 2」。</p>\n<div class=\"article-img\"><p><img src=\"http://cdn.1ouo1.com/y6vnd.png\" alt data-zoomable></p></div>\n<p>好像挺合理，但又感觉不太安心对不对？</p>\n<p>不安心就对了，因为确实会有问题，你看下面这个图。</p>\n<div class=\"article-img\"><p><img src=\"http://cdn.1ouo1.com/58gmc.png\" alt data-zoomable></p></div>\n<p>如果事情美好得像左边这个图一样，我们就可以很自然地用「回归的办法」找到绿色的分界线，干干净净地完成分类，即这时候用「回归」的思想和「分类」的思想得出的分界线一致。</p>\n<p>但如果此时有偏离 1 较多的一些值，比如右边那个图的右侧蓝色群，这就会开始让「回归」思想和「分类」思想出现偏差了。因为我们在回归训练时把「分类 1」都当做了数值 1 来做，在回归的思想中，它会认为需要让分布点都越接近 1 才越好，右下那些远大于 1 的点是「错误的数据」，所以如果真拿这些点来训练「回归模型」的话，分界线会被右下那些点「掰」成「紫色的那条线」。</p>\n<p>但就「分类」模型来看，依然在右图中是绿色的分界线才最好。这因为本质上「回归」和「分类」定义一个方法好坏的方式是不一样的。</p>\n<p>我们进一步讲，如果不是二元分类问题，而是更复杂的多元分类，此时还考虑用「回归」的方式硬解的话，比如你可能需要把「分类 1」 当成数值 1，把「分类 2」 当成数值 2；把「分类 3」 当成数值 3…</p>\n<p>这样也是不科学的，因为此时你已经不小心悄悄引入了「分类 1」和「分类 2」有相近关系（数 1 和 2），「分类 2」和「分类 3」有相近关系这样的本不存在的逻辑干扰了。</p>\n<h3 id=\"合理的方案\"><a class=\"markdownIt-Anchor\" href=\"#合理的方案\"></a> 合理的方案<a href=\"post/classification#合理的方案\"></a></h3>\n<p>理想的替代方案应该是下面这种，我们还拿二元分类来举例如下图。我们会在方法（function）里再内建一个 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>g</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">g(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span>，然后安心用这个 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>g</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">g(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span> 的大于 0 或 小于 0 来做归类。接着对于这整个方法，它的损失方程（Loss Function）则可以定义成所有样本里结果不正确的「次数总和」。即图里面的 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>δ</mi></mrow><annotation encoding=\"application/x-tex\">δ</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03785em;\">δ</span></span></span></span> 在错误是值是 1，正确时值是 0。</p>\n<div class=\"article-img\"><p><img src=\"http://cdn.1ouo1.com/k1p58.png\" alt data-zoomable></p></div>\n<p>但定睛一看，上面这个问题的解法似乎暂时已经超出了我们的认知范围，因为这玩意没法微分啊，这就意味着无法用梯度下降（Gradient Descent）来解了。它得用到后续我们会讲的感知机（Perceptron）或者支持向量机（SVM）的知识了，但今天我们将尝试先用另外一个解法来做。</p>\n<h3 id=\"经典概率论解法\"><a class=\"markdownIt-Anchor\" href=\"#经典概率论解法\"></a> 经典概率论解法<a href=\"post/classification#经典概率论解法\"></a></h3>\n<p>我们回到曾经中学的概率论课堂，假设一个蓝色球，它是从盒子 1（Box 1）中拿出来的概率，可以用下图中的式子来表达。</p>\n<div class=\"article-img\"><p><img src=\"http://cdn.1ouo1.com/oht69.png\" alt data-zoomable></p></div>\n<p>对应到我们解决「分类」的问题里，就可以看做是我们要拿一个样本进行这两种分类，只需要知道下面红框中的四个概率值即可。</p>\n<div class=\"article-img\"><p><img src=\"http://cdn.1ouo1.com/m69eb.png\" alt data-zoomable></p></div>\n<p>这四个值就需要我们通过训练数据训练估测出来。特别地，我们当拿到了这些数值之后，拥有这个模型，就可以自己生产 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span> 值作为样本了，所以这种做法也被叫做「生成模型（Generative Model）」</p>\n<p>图中的上面两个值 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><msub><mi>C</mi><mn>1</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">P(C_1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> 和 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><msub><mi>C</mi><mn>2</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">P(C_2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> 是好算的，它们也被叫做 Prior（优先要做的）。如果我们宝可梦的问题先知考虑做两种属性的分类：「水系」和「一般系」，那么两个数据就可以如下图简单算出，这很直觉不多讲。</p>\n<div class=\"article-img\"><p><img src=\"http://cdn.1ouo1.com/zhdhr.png\" alt data-zoomable></p></div>\n<p>进入第三个值，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mi mathvariant=\"normal\">∣</mi><msub><mi>C</mi><mn>1</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">P(x|C_1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> 在宝可梦中对应的解释就可以是：从「水系」宝可梦中挑（取样）一只出来，如果正好是<a href=\"https://cn.portal-pokemon.com/play/pokedex/564\" target=\"_blank\" rel=\"noopener\">「原盖海龟」</a>的概率是多少。我们假定宝可梦们都是从一个正态分布（也叫高斯分布，Gaussian Distribution）中生成取样而来。那么现在问题就是我们怎么样通过已有的训练数据（图中拿了 79 只宝可梦数据来训练），去找到生成它们的那个高斯分布模型了。</p>\n<div class=\"article-img\"><p><img src=\"http://cdn.1ouo1.com/99bmz.png\" alt data-zoomable></p></div>\n<h3 id=\"找高斯分布模型\"><a class=\"markdownIt-Anchor\" href=\"#找高斯分布模型\"></a> 找高斯分布模型<a href=\"post/classification#找高斯分布模型\"></a></h3>\n<p>我们知道，在分类模型里每一只宝可梦都由它的一堆特征（Feature）来表示（这些特征会组成一个向量参与计算）。我们简单起见先拿「防御力」和「特殊防御力」这两个特征来作图如下。</p>\n<div class=\"article-img\"><p><img src=\"http://cdn.1ouo1.com/7cl2k.png\" alt data-zoomable></p></div>\n<p>如果宝可梦的生成按照假设遵循一个正态分布，那么我们直接就可以拿数学上正态分布的式子如下（如果不了解可以放心不用管，就理解为它是一个方法即可）。</p>\n<div class=\"article-img\"><p><img src=\"http://cdn.1ouo1.com/vj5uy.png\" alt data-zoomable></p></div>\n<p>这个方法输入的 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span> 是某个宝可梦的一系列特征（向量），输出则是该宝可梦从正态分布中生成出来的概率（严格来讲是概率密度 Probability Density，它正比于概率，但这里可以简单理解为宝可梦生成出来的概率）。从数学知识中我们知道结论是这个方法的形态主要受两个因素来决定：一个是平均数 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>μ</mi></mrow><annotation encoding=\"application/x-tex\">μ</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">μ</span></span></span></span>，另一个是协方差矩阵 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span></span></span></span>。下面两个图可以具体体现两者如何影响方法的形态变化。</p>\n<div class=\"article-img\"><p><img src=\"http://cdn.1ouo1.com/dq3fr.png\" alt data-zoomable><br>\n<img src=\"http://cdn.1ouo1.com/7u097.png\" alt data-zoomable></p></div>\n<p>图中我们可以看到不同的 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>μ</mi></mrow><annotation encoding=\"application/x-tex\">μ</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">μ</span></span></span></span> 会影响最大概率分布所在的位置，而不同的 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span></span></span></span> 则会影响分布散开的程度。</p>\n<p>我们把上面提到的 79 只训练用宝可梦放到下面的式子中。那么要解那一行式子，本质就变成了要找 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>μ</mi></mrow><annotation encoding=\"application/x-tex\">μ</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">μ</span></span></span></span> 和 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span></span></span></span>。</p>\n<div class=\"article-img\"><p><img src=\"http://cdn.1ouo1.com/i9uf8.png\" alt data-zoomable></p></div>\n<h3 id=\"极大似然估计法\"><a class=\"markdownIt-Anchor\" href=\"#极大似然估计法\"></a> 极大似然估计法<a href=\"post/classification#极大似然估计法\"></a></h3>\n<p>我们讲用极大似然估计（Maximum Likelihood）的办法来找到样本数据对应的 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>μ</mi></mrow><annotation encoding=\"application/x-tex\">μ</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">μ</span></span></span></span> 和 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span></span></span></span>。它的精神大概是如下这样。</p>\n<p>其实理论上任何一个 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>μ</mi></mrow><annotation encoding=\"application/x-tex\">μ</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">μ</span></span></span></span> 和 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span></span></span></span> 所决定的正态分布都是有可能生成这 79 个训练数据的，只不过它们生成这 79 个点的概率有大有小而已。</p>\n<p>那么我们不妨定义对于 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>μ</mi></mrow><annotation encoding=\"application/x-tex\">μ</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">μ</span></span></span></span> 和 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span></span></span></span>，它们来生成这 79 个点的概率表示为 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>L</mi><mo stretchy=\"false\">(</mo><mi>μ</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">Σ</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">L(μ,\\Sigma)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">L</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">μ</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">Σ</span><span class=\"mclose\">)</span></span></span></span>。因为每一次生成单个训练数据的概率都是相互独立的，所以这个 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>L</mi><mo stretchy=\"false\">(</mo><mi>μ</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">Σ</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">L(μ,\\Sigma)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">L</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">μ</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">Σ</span><span class=\"mclose\">)</span></span></span></span> 就等于：第一个点被生成的概率 * 第二个点被生成的概率 * … * 第七十九个点被生成的概率。</p>\n<div class=\"article-img\"><p><img src=\"http://cdn.1ouo1.com/phhlo.png\" alt data-zoomable></p></div>\n<p>好，那现在我们就是要找出一个高斯分布，它的 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>L</mi><mo stretchy=\"false\">(</mo><mi>μ</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">Σ</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">L(μ,\\Sigma)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">L</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">μ</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">Σ</span><span class=\"mclose\">)</span></span></span></span>，即生成出这 79 个点的概率是最大的。</p>\n<div class=\"article-img\"><p><img src=\"http://cdn.1ouo1.com/rtnq9.png\" alt data-zoomable></p></div>\n<p>在数学上解这个问题的代数运算并不复杂，可以通过用微分找极值，也可以通过背公式解决…总之我们可以容易地在数学上找到对应概率最大的高斯分布（和对应的 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>μ</mi></mrow><annotation encoding=\"application/x-tex\">μ</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">μ</span></span></span></span> 和 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span></span></span></span>）。</p>\n<p>所以对于这 79 个水系宝可梦的训练数据，我们得到最大概率生成它们的高斯分布的 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>μ</mi><mn>1</mn></msup></mrow><annotation encoding=\"application/x-tex\">μ^1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">μ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span> 和 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi mathvariant=\"normal\">Σ</mi><mn>1</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\Sigma^1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span>，如图。</p>\n<p>特别地，我们还有 61 个一般系的宝可梦，我们也通过一样的方法找到最大概率生成它们的高斯分布的 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>μ</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">μ^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">μ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> 和 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi mathvariant=\"normal\">Σ</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\Sigma^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>。</p>\n<div class=\"article-img\"><p><img src=\"http://cdn.1ouo1.com/l7fgr.png\" alt data-zoomable></p></div>\n<p>那既然得到了两个分类的高斯分布，概率论式子里所需要的值我们都可以算啦，赶紧带进来试试。</p>\n<div class=\"article-img\"><p><img src=\"http://cdn.1ouo1.com/tkl75.png\" alt data-zoomable></p></div>\n<p>然而我们发现，对于训练集来说，两个类别的分界线不是特别明显，并且在测试数据上跑起来效果也不怎么满意，只有 47% 的准确率。</p>\n<p>有没有可能是引入的维度不够？人家本来有 7 个特性，7 维空间里，可能分界线就很明显了呢！然而并没有，7 个维度都带进来了，最终算得的测试集准确率也只有 54%。</p>\n<p>还有没有进一步优化的办法呢？有。</p>\n<h3 id=\"进一步优化\"><a class=\"markdownIt-Anchor\" href=\"#进一步优化\"></a> 进一步优化<a href=\"post/classification#进一步优化\"></a></h3>\n<p>我们可以让不同的分类来共用同一个协方差矩阵（Covariance Matrix，就是那个 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span></span></span></span>），这个协方差矩阵是跟输入的特性个数的平方成正比的，如果每一个分类都用不同的协方差矩阵，那会导致模型的参数变得过多，由此可萌导致方差（Variance）过大，最终过度拟合（Overfitting），这个是前序的知识，很好理解。</p>\n<p>于是我们考虑共用协方差矩阵来减少参数。</p>\n<div class=\"article-img\"><p><img src=\"http://cdn.1ouo1.com/4pcau.png\" alt data-zoomable></p></div>\n<p>共用了 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span></span></span></span> 之后，寻找极大似然的式子如下图。注意此时生成所有样本数据（79 个水系加上 61 个一般系）的概率变成了：用 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>μ</mi><mn>1</mn></msup></mrow><annotation encoding=\"application/x-tex\">μ^1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">μ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span> 和 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span></span></span></span> 生成每个水系宝可梦的概率相乘，再乘以用 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>μ</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">μ^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">μ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> 和 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span></span></span></span> 生成的每个一般系宝可梦的概率。</p>\n<div class=\"article-img\"><p><img src=\"http://cdn.1ouo1.com/0mmxf.png\" alt data-zoomable></p></div>\n<p>上图中 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>μ</mi><mn>1</mn></msup></mrow><annotation encoding=\"application/x-tex\">μ^1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">μ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span> 和 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>μ</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">μ^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">μ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> 还是通过老办法，分别把分类 1 和分类 2 中所有 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span> 算数平均得到。 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span></span></span></span> 同时考虑两个类别，所以兼顾一下两边分别生成样本数量的加权权重，这也好理解。</p>\n<p>经过一顿算，我们发现如果共用协方差矩阵（<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span></span></span></span>）后，两个分类的分界线变成了直线。所以虽然高斯分布不是线性的，但这种俩分类分界线是直线的，我们也叫这个模型为「线性模型（Linear Model）」，当然，用了不同 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span></span></span></span> 就不是线性模型了。</p>\n<div class=\"article-img\"><p><img src=\"http://cdn.1ouo1.com/o86k1.png\" alt data-zoomable></p></div>\n<p>进一步，我们用上所有宝可梦的特性参数作为维度，我们可以把正确率提高到 73% 了。</p>\n<h3 id=\"概率论方法总结\"><a class=\"markdownIt-Anchor\" href=\"#概率论方法总结\"></a> 概率论方法总结<a href=\"post/classification#概率论方法总结\"></a></h3>\n<p>我们来总结一下。</p>\n<p>实际上上述解决分类问题还是那老三步。</p>\n<p>第一步，选择模型。我们这一次确定了用中学概率论的那个式子做模型，那么就牵扯到我们得去找 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><msub><mi>C</mi><mn>1</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">P(C_1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>、<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><msub><mi>C</mi><mn>2</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">P(C_2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>、<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mi mathvariant=\"normal\">∣</mi><msub><mi>C</mi><mn>1</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">P(x|C_1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>、<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mi mathvariant=\"normal\">∣</mi><msub><mi>C</mi><mn>2</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">P(x|C_2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>、这些数值的不同就构成了不同的方法。</p>\n<p>第二步，定义好坏。即定义一个方法产生我们的训练数据集的概率有多大，这个概率就是它的「好坏程度」。</p>\n<p>第三步，找出它。找出那个产生训练数据集概率最大的方法（对应的 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>μ</mi></mrow><annotation encoding=\"application/x-tex\">μ</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">μ</span></span></span></span> 和 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span></span></span></span>），这个过程上面也都接触到了，都是些常规的数学处理，明白道理即可。</p>\n<div class=\"article-img\"><p><img src=\"http://cdn.1ouo1.com/401ir.png\" alt data-zoomable></p></div>\n<p>当然话说回来，解决这个分类问题，除了上面一直用的高斯分布模型之外，还有很多模型可以供你选择，具体选什么模型那这就是看你人的功夫了。无非就是需要注意那条不变的道理：模型越简单，偏离值（Bias）会越大，方差（Variance）会越小，反之亦然。</p>\n<p>还有一种情况，如果对于一个样本它的每个特征值（<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span>）生成的概率都是完全独立的（显然宝可梦不是这样的例子，比如攻击力跟防御力实际很可能是正相关的），实际上就没有必要再用高斯分布模型来做了。比如如果这个特性是二元的（0 或 1 两种状态）则可以直接使用伯努利分布（Bernoulli Distribution，也叫两点分布、0-1 分布）来做。</p>\n<div class=\"article-img\"><p><img src=\"http://cdn.1ouo1.com/6uxjt.png\" alt data-zoomable></p></div>\n<p>而如果真的所有特性都是独立产生的，即我们不需要去理会每个特性间的协方差（Covariance）关系，我们可以直接使用朴素贝叶斯分类器（Naive Bayes Classifier）来做。这个分类器在我们的这个假设（特性之间都是独立无关的）成立的时候，表现还是很棒的。当然，如果假设不成立，则它的偏离值（Bias）会很很大。</p>\n<h3 id=\"问题竟还能精简和转化\"><a class=\"markdownIt-Anchor\" href=\"#问题竟还能精简和转化\"></a> 问题竟还能精简和转化<a href=\"post/classification#问题竟还能精简和转化\"></a></h3>\n<p>我们再回头来研究一下我们一开始想求的这个概率论式子 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><msub><mi>C</mi><mn>1</mn></msub><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">P(C_1|x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">∣</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span>，我们其实可以对它做如下图的转化，最终可以得到一个关于参数 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span></span></span></span> 的 S 型生长曲线函数（Sigmoid Function）。这个函数当 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span></span></span></span> 趋近于无穷大时，函数值趋近于 1，当 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span></span></span></span> 趋近于负无穷时，函数值趋近于 0。</p>\n<div class=\"article-img\"><p><img src=\"http://cdn.1ouo1.com/c6ha0.png\" alt data-zoomable></p></div>\n<p>其实在数学上我们接着可以对 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span></span></span></span> 做一顿计算，最终在共用 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span></span></span></span> 的情况下，简化出一个 这个概率最终等于一个关于 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>w</mi><mi>x</mi><mo>+</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">wx+b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">b</span></span></span></span> 的式子。这其实也就解释了为啥我们之前的两个分类分界线是直线。</p>\n<div class=\"article-img\"><p><img src=\"http://cdn.1ouo1.com/9tp9i.png\" alt data-zoomable></p></div>\n<p>那话说回来了，我们最终忙活半天又是 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span></span></span></span>（分类样本数量）又是 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>μ</mi></mrow><annotation encoding=\"application/x-tex\">μ</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">μ</span></span></span></span> 又是 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span></span></span></span> 的，我们为什么不直接去找 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>w</mi></mrow><annotation encoding=\"application/x-tex\">w</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02691em;\">w</span></span></span></span> 和 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">b</span></span></span></span> 呢？</p>\n<p>这就是我们接下来要说的「逻辑回归（Logistic Regression）」问题了，今天先到这儿，晚安。</p>\n","prev":{"title":"关于 2019 和 2020","slug":"2020"},"next":{"title":"聊明白机器学习 | 四. 梯度下降（Gradient Descent）　","slug":"gradient_descent"},"link":"https://talk2.it/post/classification/","toc":[{"title":"<a class=\"markdownIt-Anchor\"></a> 前言干话","id":"前言干话","index":"1"},{"title":"<a class=\"markdownIt-Anchor\"></a> 分类是什么有啥用","id":"分类是什么有啥用","index":"2"},{"title":"<a class=\"markdownIt-Anchor\"></a> 以精灵宝可梦举例","id":"以精灵宝可梦举例","index":"3","children":[{"title":"<a class=\"markdownIt-Anchor\"></a> 分类可有用了","id":"分类可有用了","index":"3.1"},{"title":"<a class=\"markdownIt-Anchor\"></a> 当成回归来处理？","id":"当成回归来处理","index":"3.2"},{"title":"<a class=\"markdownIt-Anchor\"></a> 合理的方案","id":"合理的方案","index":"3.3"},{"title":"<a class=\"markdownIt-Anchor\"></a> 经典概率论解法","id":"经典概率论解法","index":"3.4"},{"title":"<a class=\"markdownIt-Anchor\"></a> 找高斯分布模型","id":"找高斯分布模型","index":"3.5"},{"title":"<a class=\"markdownIt-Anchor\"></a> 极大似然估计法","id":"极大似然估计法","index":"3.6"},{"title":"<a class=\"markdownIt-Anchor\"></a> 进一步优化","id":"进一步优化","index":"3.7"},{"title":"<a class=\"markdownIt-Anchor\"></a> 概率论方法总结","id":"概率论方法总结","index":"3.8"},{"title":"<a class=\"markdownIt-Anchor\"></a> 问题竟还能精简和转化","id":"问题竟还能精简和转化","index":"3.9"}]}],"reward":true,"copyright":{"author":"Bingo","link":"<a href=\"https://talk2.it/post/classification/\" title=\"聊明白机器学习 | 五. 分类（Classification）　\">https://talk2.it/post/classification/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}